openapi: 3.0.3
info:
  title: Edge API (SMS Dev)
  version: 0.1.0
servers:
  - url: http://localhost:8081
paths:
  /healthz:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  time: { type: string, format: date-time }
  /tenants:
    get:
      summary: List tenants
      responses:
        '200':
          description: List of tenants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
  /tenants/{id}:
    get:
      summary: Get tenant by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404': { description: Not found }
  /vessels:
    get:
      summary: List vessels by tenant
      parameters:
        - in: query
          name: tenantId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Vessels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vessel'
  /auth/set-pin:
    post:
      summary: Set/update PIN for a user (dev/local use)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string, format: uuid }
                username: { type: string }
                pin: { type: string }
              required: [tenantId, username, pin]
      responses:
        '200': { description: OK }
  /auth/login:
    post:
      summary: Login with tenant + username/email + PIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401': { description: Unauthorized }
  /auth/logout:
    post:
      summary: Logout current session
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /me:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401': { description: Unauthorized }
  /admin/ping:
    get:
      summary: Admin-only test route
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }
        '403': { description: Forbidden }
  /demo/quickstart:
    post:
      summary: Dev-only quickstart to get a token
      responses:
        '200': { description: OK }

  /logbooks/{type}:
    get:
      summary: List logbook entries by type + tenant + vessel
      parameters:
        - in: path
          name: type
          required: true
          schema: { type: string, enum: [bridge, engine] }
        - in: query
          name: tenantId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: vesselId
          required: true
          schema: { type: string, format: uuid }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Entries
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/LogbookEntry' }
    post:
      summary: Create a logbook entry
      parameters:
        - in: path
          name: type
          required: true
          schema: { type: string, enum: [bridge, engine] }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string, format: uuid }
                vesselId: { type: string, format: uuid }
                data: { type: object }
              required: [tenantId, vesselId, data]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LogbookEntry' }
  /logbooks/{type}/{id}/correction:
    post:
      summary: Request a correction on an entry
      parameters:
        - in: path
          name: type
          required: true
          schema: { type: string, enum: [bridge, engine] }
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }
  /logbooks/{type}/{id}/countersign:
    post:
      summary: Countersign an entry (reviewer/admin)
      parameters:
        - in: path
          name: type
          required: true
          schema: { type: string, enum: [bridge, engine] }
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Tenant:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        region: { type: string }
        createdAt: { type: string, format: date-time }
    Vessel:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        name: { type: string }
        imoNumber: { type: string, nullable: true }
        flagState: { type: string, nullable: true }
        classSociety: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        username: { type: string, nullable: true }
        email: { type: string, nullable: true }
        displayName: { type: string, nullable: true }
        roles:
          type: array
          items: { type: string }
    LoginRequest:
      type: object
      properties:
        tenantId: { type: string, format: uuid }
        username: { type: string, nullable: true }
        email: { type: string, nullable: true }
        pin: { type: string }
        deviceId: { type: string, nullable: true }
      required: [tenantId, pin]
    LoginResponse:
      type: object
      properties:
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }
    LogbookEntry:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        vesselId: { type: string, format: uuid }
        type: { type: string, enum: [bridge, engine] }
        ts: { type: string, format: date-time }
        data: { type: object }
        correctionRequested: { type: boolean }
        correctionReason: { type: string, nullable: true }
        correctionBy: { type: string, nullable: true }
        correctionAt: { type: string, format: date-time, nullable: true }
        countersignedBy: { type: string, nullable: true }
        countersignedAt: { type: string, format: date-time, nullable: true }
